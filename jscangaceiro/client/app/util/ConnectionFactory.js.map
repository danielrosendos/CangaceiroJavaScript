{"version":3,"sources":["../../app-src/util/ConnectionFactory.js"],"names":["stores","connection","close","ConnectionFactory","constructor","Error","getConnection","Promise","resolve","reject","openRequest","indexedDB","open","onupgradeneeded","e","_createStores","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","store","objectStoreNames","contains","deleteObjectStore","createObjectStore","autoIncrement","closeConnection"],"mappings":";;;;;;AAAA,kBAAMA,SAAS,CAAC,aAAD,CAAf;;AAEI,gBAAIC,aAAa,IAAjB;;AAEA,gBAAIC,QAAQ,IAAZ;;AAEO,kBAAMC,iBAAN,CAAwB;;AAE3BC,8BAAc;AACV,0BAAM,IAAIC,KAAJ,CAAW,8CAAX,CAAN;AACH;;AAED,uBAAOC,aAAP,GAAuB;AACnB,2BAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,4BAAGR,UAAH,EAAe,OAAOO,QAAQP,UAAR,CAAP;;AAEf,8BAAMS,cAAcC,UAAUC,IAAV,CAAe,cAAf,EAA+B,CAA/B,CAApB;;AAEAF,oCAAYG,eAAZ,GAA8BC,KAAK;AAC/BX,8CAAkBY,aAAlB,CAAgCD,EAAEE,MAAF,CAASC,MAAzC;AACH,yBAFD;AAGAP,oCAAYQ,SAAZ,GAAwBJ,KAAK;AACzBb,yCAAaa,EAAEE,MAAF,CAASC,MAAtB;AACAf,oCAAQD,WAAWC,KAAX,CAAiBiB,IAAjB,CAAsBlB,UAAtB,CAAR;AACAA,uCAAWC,KAAX,GAAmB,MAAM;AACrB,sCAAM,IAAIG,KAAJ,CAAU,6CAAV,CAAN;AACH,6BAFD;AAGAG,oCAAQP,UAAR;AACH,yBAPD;AAQAS,oCAAYU,OAAZ,GAAsBN,KAAK;AACvBO,oCAAQC,GAAR,CAAYR,EAAEE,MAAF,CAASO,KAArB;AACAd,mCAAOK,EAAEE,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACH,yBAHD;AAIH,qBApBM,CAAP;AAqBH;;AAED,uBAAOT,aAAP,CAAqBd,UAArB,EAAiC;AAC7BD,2BAAOyB,OAAP,CAAeC,SAAS;AACpB,4BAAGzB,WAAW0B,gBAAX,CAA4BC,QAA5B,CAAqCF,KAArC,CAAH,EACIzB,WAAW4B,iBAAX,CAA6BH,KAA7B;AACJzB,mCAAW6B,iBAAX,CAA6BJ,KAA7B,EAAoC,EAAEK,eAAe,IAAjB,EAApC;AACH,qBAJD;AAKH;;AAED,uBAAOC,eAAP,GAAyB;AACrB,wBAAG/B,UAAH,EAAe;AACXC;AACH;AACJ;;AA1C0B","file":"ConnectionFactory.js","sourcesContent":["const stores = ['negociacoes'];\r\n\r\n    let connection = null;\r\n\r\n    let close = null;\r\n\r\n    export class ConnectionFactory {\r\n\r\n        constructor() {\r\n            throw new Error ('Não é possível criar instâncias dessa classe');\r\n        }\r\n\r\n        static getConnection() {\r\n            return new Promise((resolve, reject) => {\r\n                if(connection) return resolve(connection);\r\n\r\n                const openRequest = indexedDB.open('jscangaceiro', 2);\r\n\r\n                openRequest.onupgradeneeded = e => {\r\n                    ConnectionFactory._createStores(e.target.result);\r\n                };\r\n                openRequest.onsuccess = e => {\r\n                    connection = e.target.result;\r\n                    close = connection.close.bind(connection);\r\n                    connection.close = () => {\r\n                        throw new Error('Você não pode fechar diretamente a conecxão');\r\n                    };\r\n                    resolve(connection);\r\n                };\r\n                openRequest.onerror = e => {\r\n                    console.log(e.target.error)\r\n                    reject(e.target.error.name)\r\n                };\r\n            });\r\n        }\r\n\r\n        static _createStores(connection) {\r\n            stores.forEach(store => {\r\n                if(connection.objectStoreNames.contains(store))\r\n                    connection.deleteObjectStore(store);\r\n                connection.createObjectStore(store, { autoIncrement: true});\r\n            });\r\n        }\r\n\r\n        static closeConnection() {\r\n            if(connection) {\r\n                close();\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n"]}